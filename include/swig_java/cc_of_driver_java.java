/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.codechix.onf_driver;

public class cc_of_driver_java implements cc_of_driver_javaConstants {
  public static void setSEND_MSG_BUF(String value) {
    cc_of_driver_javaJNI.SEND_MSG_BUF_set(value);
  }

  public static String getSEND_MSG_BUF() {
    return cc_of_driver_javaJNI.SEND_MSG_BUF_get();
  }

  public static SWIGTYPE_p_p_char getCc_of_errtable() {
    long cPtr = cc_of_driver_javaJNI.cc_of_errtable_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public static String cc_of_strerror(int errnum) {
    return cc_of_driver_javaJNI.cc_of_strerror(errnum);
  }

  public static int cc_of_lib_init(of_dev_type_e dev_type) {
    return cc_of_driver_javaJNI.cc_of_lib_init(dev_type.swigValue());
  }

  public static int cc_of_lib_free() {
    return cc_of_driver_javaJNI.cc_of_lib_free();
  }

  public static int cc_of_dev_register(SWIGTYPE_p_uint32_t controller_ip, SWIGTYPE_p_uint32_t switch_ip, SWIGTYPE_p_uint16_t controller_L4_port, cc_ofver_e max_ofver, SWIGTYPE_p_f_uint64_t_uint8_t_p_void_size_t__int recv_func, SWIGTYPE_p_f_uint64_t_uint8_t__int accept_func, SWIGTYPE_p_f_uint64_t_uint8_t__int del_func) {
    return cc_of_driver_javaJNI.cc_of_dev_register(SWIGTYPE_p_uint32_t.getCPtr(controller_ip), SWIGTYPE_p_uint32_t.getCPtr(switch_ip), SWIGTYPE_p_uint16_t.getCPtr(controller_L4_port), max_ofver.swigValue(), SWIGTYPE_p_f_uint64_t_uint8_t_p_void_size_t__int.getCPtr(recv_func), SWIGTYPE_p_f_uint64_t_uint8_t__int.getCPtr(accept_func), SWIGTYPE_p_f_uint64_t_uint8_t__int.getCPtr(del_func));
  }

  public static int cc_of_dev_free(SWIGTYPE_p_uint32_t controller_ip, SWIGTYPE_p_uint32_t switch_ip, SWIGTYPE_p_uint16_t controller_L4_port) {
    return cc_of_driver_javaJNI.cc_of_dev_free(SWIGTYPE_p_uint32_t.getCPtr(controller_ip), SWIGTYPE_p_uint32_t.getCPtr(switch_ip), SWIGTYPE_p_uint16_t.getCPtr(controller_L4_port));
  }

  public static int cc_of_create_channel(SWIGTYPE_p_uint32_t controller_ip, SWIGTYPE_p_uint32_t switch_ip, SWIGTYPE_p_uint16_t controller_L4_port, SWIGTYPE_p_uint64_t dp_id, SWIGTYPE_p_uint8_t aux_id, L4_type_e l4_proto) {
    return cc_of_driver_javaJNI.cc_of_create_channel(SWIGTYPE_p_uint32_t.getCPtr(controller_ip), SWIGTYPE_p_uint32_t.getCPtr(switch_ip), SWIGTYPE_p_uint16_t.getCPtr(controller_L4_port), SWIGTYPE_p_uint64_t.getCPtr(dp_id), SWIGTYPE_p_uint8_t.getCPtr(aux_id), l4_proto.swigValue());
  }

  public static int cc_of_destroy_channel(SWIGTYPE_p_uint64_t dp_id, SWIGTYPE_p_uint8_t aux_id) {
    return cc_of_driver_javaJNI.cc_of_destroy_channel(SWIGTYPE_p_uint64_t.getCPtr(dp_id), SWIGTYPE_p_uint8_t.getCPtr(aux_id));
  }

  public static int cc_of_send_pkt(SWIGTYPE_p_uint64_t dp_id, SWIGTYPE_p_uint8_t aux_id, SWIGTYPE_p_void of_msg, long msg_len) {
    return cc_of_driver_javaJNI.cc_of_send_pkt(SWIGTYPE_p_uint64_t.getCPtr(dp_id), SWIGTYPE_p_uint8_t.getCPtr(aux_id), SWIGTYPE_p_void.getCPtr(of_msg), msg_len);
  }

  public static int cc_of_set_real_dpid_auxid(SWIGTYPE_p_uint64_t dummy_dpid, SWIGTYPE_p_uint8_t dummy_auxid, SWIGTYPE_p_uint64_t dp_id, SWIGTYPE_p_uint8_t aux_id) {
    return cc_of_driver_javaJNI.cc_of_set_real_dpid_auxid(SWIGTYPE_p_uint64_t.getCPtr(dummy_dpid), SWIGTYPE_p_uint8_t.getCPtr(dummy_auxid), SWIGTYPE_p_uint64_t.getCPtr(dp_id), SWIGTYPE_p_uint8_t.getCPtr(aux_id));
  }

  public static int cc_of_get_conn_stats(SWIGTYPE_p_uint64_t dp_id, SWIGTYPE_p_uint8_t aux_id, SWIGTYPE_p_uint32_t rx_pkt, SWIGTYPE_p_uint32_t tx_pkt, SWIGTYPE_p_uint32_t tx_drops) {
    return cc_of_driver_javaJNI.cc_of_get_conn_stats(SWIGTYPE_p_uint64_t.getCPtr(dp_id), SWIGTYPE_p_uint8_t.getCPtr(aux_id), SWIGTYPE_p_uint32_t.getCPtr(rx_pkt), SWIGTYPE_p_uint32_t.getCPtr(tx_pkt), SWIGTYPE_p_uint32_t.getCPtr(tx_drops));
  }

  public static void cc_of_debug_toggle(SWIGTYPE_p_gboolean debug_on) {
    cc_of_driver_javaJNI.cc_of_debug_toggle(SWIGTYPE_p_gboolean.getCPtr(debug_on));
  }

  public static void cc_of_log_toggle(SWIGTYPE_p_gboolean logging_on) {
    cc_of_driver_javaJNI.cc_of_log_toggle(SWIGTYPE_p_gboolean.getCPtr(logging_on));
  }

  public static String cc_of_log_read() {
    return cc_of_driver_javaJNI.cc_of_log_read();
  }

  public static void cc_of_log_clear() {
    cc_of_driver_javaJNI.cc_of_log_clear();
  }

}
